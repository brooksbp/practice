// Let A be an array of n integers.  Write an encode function that returns
// a string representing the concatenation of the Elias gamma codes for
// <A[0], A[1],...,A[n-1]> in that order, and a decode function that takes
// a string s assumed to be generated by the encode function, and returns
// the array that was passed to the encode function.

// 13 -> 1101 -> 4bits -1 -> 000 => 0001101

#include <string>
#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

string encode(const vector<int> &A) {
  string ans;
  for (auto x : A) {
    string bStr;
    if (0 > x) {
      x = -x;
    }
    while (x) {
      int r = x % 2;
      bStr.push_back('0' + r);
      x /= 2;
    }
    if (bStr.size() == 0) {
      bStr.push_back('0');
    }
    reverse(bStr.begin(), bStr.end());

    string zeros;
    for (int i = 0; i < bStr.size() -1; i++) {
      zeros += '0';
    }

    zeros += bStr;
    ans += zeros;
  }
  return ans;
}

// vector<int> decode(string &s) {
// }

// decode is ambiguous!, encode(A) == encode(B)

int main(int argc, char *argv[]) {
  vector<int> A = { 13 };
  cout << encode(A) << endl;
  vector<int> B = { 0, 6, 1 };
  cout << encode(B) << endl;
  return 0;
}
